<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React Native环境搭建</title>
    <url>/2020/11/03/React%20Native%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>react-native</code> 的环境搭建相比较于普通的web项目(vue、react）来说要繁琐不少，但是通过以下的方式基本都可以得到解决。</p>
<ul>
<li>笔者的博文</li>
<li><a href="https://reactnative.cn/docs/getting-started.html">RN的官网文档</a></li>
<li>百度+谷歌</li>
</ul>
<h2 id="安装环境介绍"><a href="#安装环境介绍" class="headerlink" title="安装环境介绍"></a>安装环境介绍</h2><ul>
<li>操作系统：win10专业版</li>
<li>手机：<code>安卓手机真机</code>一部或夜神模拟器</li>
<li>必须安装的依赖有:Node、JDK、Android SDK</li>
</ul>
<h2 id="Node的安装"><a href="#Node的安装" class="headerlink" title="Node的安装"></a>Node的安装</h2><ul>
<li>先到 <a href="http://nodejs.cn/">官网 </a>去下载node版本(使用 <a href="https://github.com/coreybutler/nvm-windows">nvm</a> 工具来安装也可以)</li>
<li>笔者当前是用的 <strong>12.14.0</strong> 版本</li>
<li>以 <strong>管理员</strong> 身份安装 然后一直点击下一步即可</li>
</ul>
<h2 id="Yarn的安装"><a href="#Yarn的安装" class="headerlink" title="Yarn的安装"></a><a href="https://yarn.bootcss.com/">Yarn</a>的安装</h2><p>Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install yarn -g  <span class="comment">// 使用npm全局安装yarn </span></span><br></pre></td></tr></table></figure>

<p>检查是否安装成功</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn -v</span><br></pre></td></tr></table></figure>

<p><strong>效果如下:</strong></p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522155320956.png" alt="image-20200522155320956"></p>
<h2 id="JDK的安装与配置"><a href="#JDK的安装与配置" class="headerlink" title="JDK的安装与配置"></a>JDK的安装与配置</h2><blockquote>
<p>Java SE Development Kit</p>
</blockquote>
<p>安卓系统的APP离不开JAVA环境，因此需要下载安装JDK(1.8版本)。到<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">该网站</a>下载JDK</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522155509416.png" alt="image-20200522155509416"></p>
<p>需要注意的是单击下载之后，会跳转到一个Oracler的登陆页面，得登陆之后才可以下载，如果没有账号可以注册一个，也是比较简单，下载完成之后，以管理身份进行默认安装。</p>
<h3 id="JDK的环境变量配置"><a href="#JDK的环境变量配置" class="headerlink" title="JDK的环境变量配置"></a>JDK的环境变量配置</h3><p>1.右键我的电脑，点属性</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161608862.png" alt="image-20200522161608862"></p>
<p>2.然后单击高级系统设置，在弹出来的对话框中单击高级，再单击环境变量</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161628275.png" alt="image-20200522161628275"></p>
<p>3.在弹出来的对话框中设置如下</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161647214.png" alt="image-20200522161647214"></p>
<p>4.然后在 <strong>系统变量</strong> 中找到path项单击，然后再单击下面的编辑，在弹出框中设置如下</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161712608.png" alt="image-20200522161712608"></p>
<p>5.到此JDK的环境变量设置完毕，可以再次打开命令行终端，使用命令 <code>java</code> 与 <code>javac</code> 检测一下是否设置<br>成功。</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161731987.png" alt="image-20200522161731987"></p>
<hr>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161746069.png" alt="image-20200522161746069"></p>
<h2 id="Android-SDK的下载与安装"><a href="#Android-SDK的下载与安装" class="headerlink" title="Android SDK的下载与安装"></a>Android SDK的下载与安装</h2><p>我们可以直接下载Android SDK并进行必要配置<br>1.首先打开 <a href="https://www.androiddevtools.cn/">网站</a>，然后一直向下拉，找到 SDK Tools 进行下载</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522161947215.png" alt="image-20200522161947215"></p>
<p>2.以管理员身份安装此软件，设置 允许使用此计算机的所有人 选项，其它一路默认到底，直到安装完成.<br>切记，切记，切记，重要的事情说三遍，一定记着Android SDK的安装路径，后面会打开这个管理器下载东<br>西</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162022143.png" alt="image-20200522162022143"></p>
<h2 id="Android-SDK的下载项"><a href="#Android-SDK的下载项" class="headerlink" title="Android SDK的下载项"></a>Android SDK的下载项</h2><p>1.根据RN中文网的描述，编译React Native应用需要的是Android 9版本的SDK，还需要各种组件，为<br>了当前以及后期的稳定，总结起来，总共需要下载:</p>
<ul>
<li>Android SDK Tools 25.2.5（新版本SDK Manager没有这个）</li>
<li>Android SDK Platform-tools 29.0.5</li>
<li>Android SDK Build-tools 29</li>
<li>Android SDK Build-tools 28.0.3</li>
<li>Android SDK Build-tools 28.0.2  </li>
<li>Android SDK Build-tools 28.0.1</li>
<li>Android SDK Build-tools 28</li>
<li>Android SDK Build-tools 27</li>
<li>SDK Platform 29</li>
<li>Intel x86 Atom System Image 29</li>
<li>SDK Platform 28</li>
<li>Intel x86 Atom System Image 28</li>
<li>SDK Platform 27</li>
</ul>
<p>2.接下来，打开<code>SDK Manager.exe</code>，照此截图依次下载以上SDK及组件</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162144179.png" alt="image-20200522162144179"></p>
<hr>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162154907.png" alt="image-20200522162154907"></p>
<hr>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162228056.png" alt="image-20200522162228056"></p>
<hr>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162257510.png" alt="image-20200522162257510"></p>
<p>3.此下载的过程取决于自家的网速了，不过一般都会成功的，耐心等待安装完成即可。</p>
<h2 id="Android环境变量设置"><a href="#Android环境变量设置" class="headerlink" title="Android环境变量设置"></a>Android环境变量设置</h2><p>1.右键选中 此电脑 点属性，再点高级，再点环境变量，设置如下</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162417205.png" alt="image-20200522162417205"></p>
<hr>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522162431658.png" alt="image-20200522162431658"></p>
<p>2.到此，安卓的环境变量配置完成</p>
<h2 id="初始化项目和打包APP到手机"><a href="#初始化项目和打包APP到手机" class="headerlink" title="初始化项目和打包APP到手机"></a>初始化项目和打包APP到手机</h2><ol>
<li><p>准备一台Android手机, 通过数据线连接到电脑，设置启用USB调试</p>
</li>
<li><p>如果没有安卓手机，可以使用安卓模拟器也可以，推荐使用夜神模拟器 ，自行百度下载安装</p>
</li>
<li><p>一般的手机在设置中可以直接找到 开发者选项 进行开启, 如果找不到 , 就自行百度查一下</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522170648131.png" alt="image-20200522170648131"></p>
</li>
<li><p>手机连接电脑成功后运行检测命令  <code>adb devices</code> , 如果有输出设备列表与  ID 相关的字符串就证明<br>手机和电脑是连接成功了，如果没有显示设备号，则说明连接有问题，一定要保证手机和电脑是正常连接状态</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522170726891.png" alt="image-20200522170726891"></p>
</li>
<li><p>运行  <code>npx react-native init 项目名称</code> 命令初始化一个  React-Native 项目, 创建时需要联网 下载 依赖<br>包, 可能比较慢，取决于各自的网速，一定要耐心等待，如果出错了，则重新运行命令再次初始化即可，例<br>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx react-native init myApp </span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>cd myApp</code> 命令进行此项目文件夹，确保手机和电脑连接正常的情况下，然后再输入命令 <code>adb devices </code>来检测一下手机是否正常连接，然后再使用命令 <code>yarn android</code>   将APP打包到手<br>机上</p>
</li>
<li><p>手机上出现如下画面，说明打包成功</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522170849831.png" alt="image-20200522170849831"></p>
</li>
</ol>
<h2 id="手机屏幕投影工具"><a href="#手机屏幕投影工具" class="headerlink" title="手机屏幕投影工具"></a>手机屏幕投影工具</h2><p>为了在电脑上看到真实的手机屏幕,可以安装手机屏幕投影工具</p>
<p>网上有很多工具,百度即可看到。笔者使用的是<a href="https://github.com/Genymobile/scrcpy">scrcpy</a></p>
<h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><ol>
<li><p>下载好工具 </p>
</li>
<li><p>手机通过usb连接到电脑</p>
</li>
<li><p>双击打开工具即可</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/image-20200522172425782.png" alt="image-20200522172425782"></p>
<p><strong>笔者学习React Native是看b站视频学习的，资料也是来自那位老师，下面奉上老师视频链接</strong></p>
<p><a href="https://www.bilibili.com/video/BV1e5411L7VV">React Native视频链接</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>js优化</title>
    <url>/2020/11/02/js%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="优化方法："><a href="#优化方法：" class="headerlink" title="优化方法："></a>优化方法：</h2><p>1.阻塞式脚本：合并文件（减少http请求），将script标签放在body尾部（减少页面css，html的下载阻塞，减少界面的空白时间（浏览器在解析到script标签之前，不会渲染页面的任何部分））</p>
<blockquote>
<p>目前流行的构建工具，如webpack,gulp，都有打包、合并文件的功能。</p>
</blockquote>
<p>2.无阻塞式脚本：延迟脚本和动态脚本均不阻塞，即下载过程不阻塞其他进程</p>
<p>延迟脚本：<br>defer和async属性：都是并行下载，下载过程不阻塞，区别在于执行时机，async是下载完成后立即执行；defer是等页面加载完成后再执行。defer仅当src属性声明时才生效（HTML5的规范）</p>
<p>动态脚本：<br>动态添加script标签，返回的代码通常会立刻执行，所以，为了确保脚本下载完成且准备就绪后才执行，须侦听load事件。将script添加到head中比添加到body中更保险。</p>
<h2 id="数据存取"><a href="#数据存取" class="headerlink" title="数据存取"></a>数据存取</h2><p>将全局变量存储到局部变量中：因为全局变量总是存在于执行环境作用域链的最末端，所以，访问全局变量是最慢的，访问局部变量是最快的。尤其是对于未优化过的JavaScript引擎。</p>
<p>在JavaScript中，只有2个语句可以在执行时临时改变作用域链：with语句和try-catch的catch子句。with语句会使得局部变量位于作用域第二层，会使性能下降，所以应避免使用。try-catch权衡使用（因为可预测的错误说明代码有问题，应及早修复）。</p>
<p>尽量避免使用with，try-catch，eval等动态作用域语句，因为JavaScript引擎无法通过静态分析的方法进行优化。</p>
<p>闭包会影响性能（作用域链加深）和可能导致内存泄漏（IE中）</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol>
<li>使用对象字面量代替对象</li>
<li>使用局部变量存储全局变量和对象成员</li>
<li>尽量不用with，eval语句，try-catch的catch子句要谨慎使用</li>
<li>嵌套越深，性能越差，尽量少用。</li>
</ol>
<h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><p>DOM和JavaScript是2个独立的功能，只通过API连接，用JavaScript操作DOM天生就慢，所以应尽量减少用JavaScript操作DOM。</p>
<h3 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h3><p>1.减少访问DOM的次数，把运算尽量留在ECMAScript这一端处理。<br>2.innerHTML在绝大多数浏览器中比原生DOM方法要快（最新版的chrome除外），推荐使用。<br>3.用element.cloneNode()代替document.createElement()，稍快一些。<br>4.缓存HTML集合的length.<br>5.使用children代替childNodes，因为childNodes会包含文本节点（空格）和注释节点，还需要自己额外过滤这些节点，children已经帮我们过滤掉这些节点了，而且使用的过滤方法效率很高。<br>6.原生选择器API：querySelectorAll()和querySelector() ，IE8及以上支持<br>querySelectorAll()返回的是个nodelist（也是类数组），不是HTML集合（与getElenmentsByTagName等不同）。<br>7.减少重绘和重排：<br>在修改样式的过程中，最好避免使用下面的属性,因为它们会刷新渲染队列，尽量少查询下列属性，可以用局部变量缓存结果。<br>8.合并多次对DOM和样式的修改：<br>9.批量修改DOM时，使用documentfragment：文档片段是一个轻量级的document对象，它本身就是为了更新和移动节点设计的。<br>10.动画中使用绝对定位，使用拖放代理。<br>11.使用事件委托来减少事件处理器的数量。 </p>
<h2 id="算法和流程控制"><a href="#算法和流程控制" class="headerlink" title="算法和流程控制"></a>算法和流程控制</h2><ol>
<li>for…in的循环性能最差（因为它需要搜索实例和原型上的所有属性），除非，你需要遍历一个属性数量未知的对象，否则不要使用它。更不要用它遍历数组成员。其余的循环性能都差不多。</li>
<li>倒序循环，把减法操作放到控制条件中，例如：k–，这样只是比较“它是true吗？”速度更快。</li>
<li>forEach()比数组循环慢，如果对性能有极致要求，还是用数组循环好。</li>
<li>当判断值多于2个时，使用switch，否则用if-else （数量少时，性能差别不大，可根据个人喜好使用）。若判断值很多，且没有什么复杂的操作，可以用数组代替switch。<br>在JavaScript中，switch使用全等操作符，不会发生类型转换的损耗。</li>
<li>把最可能出现的条件放在首位。</li>
<li>调用栈溢出错误基本都是由递归导致的：不正确的终止条件；包含了太多递归，超过了浏览器的调用栈限制。把递归算法改用迭代算法实现是避免调用栈溢出错误的解决方法之一。</li>
<li>缓存：避免重复性工作，手动实现缓存（Vue源码中就有很多缓存）</li>
</ol>
<p><strong>tips: JavaScript的下载和执行会阻塞用户界面的绘制和其他资源的下载</strong></p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>js优化</tag>
      </tags>
  </entry>
  <entry>
    <title>css优化</title>
    <url>/2020/11/02/css%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-内联首屏关键CSS（Critical-CSS）"><a href="#1-内联首屏关键CSS（Critical-CSS）" class="headerlink" title="1. 内联首屏关键CSS（Critical CSS）"></a>1. 内联首屏关键CSS（Critical CSS）</h2><p>性能优化中有一个重要的指标——<strong>首次有效绘制</strong>（First Meaningful Paint，简称FMP）即指页面的首要内容（primary content）出现在屏幕上的时间。这一指标影响用户看到页面前所需等待的时间，而<strong>内联首屏关键CSS（即Critical CSS，可以称之为首屏关键CSS）</strong>能减少这一时间。</p>
<p>大家应该都习惯于通过link标签引用外部CSS文件。但需要知道的是，将CSS直接内联到HTML文档中能使CSS更快速地下载。而使用外部CSS文件时，需要在HTML文档下载完成后才知道所要引用的CSS文件，然后才下载它们。所以说，<strong>内联CSS能够使浏览器开始页面渲染的时间提前</strong>，因为在HTML下载完成之后就能渲染了。</p>
<p>既然内联CSS能够使页面渲染的开始时间提前，那么是否可以内联所有的CSS呢？答案显然是否定的，这种方式并不适用于内联较大的CSS文件。因为<a href="https://tylercipriani.com/blog/2016/09/25/the-14kb-in-the-tcp-initial-window/">初始拥塞窗口</a>存在限制（TCP相关概念，通常是 14.6kB，压缩后大小），如果内联CSS后的文件超出了这一限制，系统就需要在服务器和浏览器之间进行更多次的往返，这样并不能提前页面渲染时间。因此，我们应当<strong>只将渲染首屏内容所需的关键CSS内联到HTML中</strong>。</p>
<p>既然已经知道内联首屏关键CSS能够优化性能了，那下一步就是如何确定首屏关键CSS了。显然，我们不需要手动确定哪些内容是首屏关键CSS。Github上有一个项目<a href="https://github.com/filamentgroup/criticalCSS">Critical CSS</a>4，可以将属于首屏的关键样式提取出来。</p>
<p>不过内联CSS有一个缺点，内联之后的CSS不会进行缓存，每次都会重新下载。不过如上所说，如果我们将内联后的文件大小控制在了14.6kb以内，这似乎并不是什么大问题。</p>
<p>如上，我们已经介绍了为什么要内联关键CSS以及如何内联，那么剩下的CSS我们怎么处理好呢？建议使用外部CSS引入剩余CSS，这样能够启用缓存，除此之外还可以异步加载它们。</p>
<h2 id="2-异步加载CSS"><a href="#2-异步加载CSS" class="headerlink" title="2. 异步加载CSS"></a>2. 异步加载CSS</h2><p>CSS会阻塞渲染，在CSS文件请求、下载、解析完成之前，浏览器将不会渲染任何已处理的内容。有时，这种阻塞是必须的，因为我们并不希望在所需的CSS加载之前，浏览器就开始渲染页面。那么将首屏关键CSS内联后，剩余的CSS内容的阻塞渲染就不是必需的了，可以使用外部CSS，并且异步加载。</p>
<p>现在，<a href="https://www.w3.org/TR/preload/">rel=”preload”</a>这一Web标准指出了如何异步加载资源，包括CSS类资源。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">href</span>=<span class="string">&quot;mystyles.css&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">onload</span>=<span class="string">&quot;this.rel=&#x27;stylesheet&#x27;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意，<code>as</code>是必须的。忽略<code>as</code>属性，或者错误的<code>as</code>属性会使<code>preload</code>等同于<code>XHR</code>请求，浏览器不知道加载的是什么内容，因此此类资源加载优先级会非常低。<code>as</code>的可选值可以参考上述标准文档。</p>
<p>看起来，<code>rel=&quot;preload&quot;</code>的用法和上面两种没什么区别，都是通过更改某些属性，使得浏览器异步加载CSS文件但不解析，直到加载完成并将修改还原，然后开始解析。</p>
<p>但是它们之间其实有一个很重要的不同点，那就是<strong>使用preload，比使用不匹配的<code>media</code>方法能够更早地开始加载CSS</strong>。所以尽管这一标准的支持度还不完善，仍建议优先使用该方法。</p>
<p>该标准现在已经是候选标准，相信浏览器会逐渐支持该标准。在各浏览器的支持度如下图所示。</p>
<p><img data-src="https://user-gold-cdn.xitu.io/2018/8/1/164f3b1b1df0672d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="preload浏览器支持度"></p>
<p>从上图可以看出这一方法在现在的浏览器中支持度不算乐观，不过我们可以通过<a href="https://github.com/filamentgroup/loadCSS/tree/v2.0.1#loadcss">loadCSS</a>进行polyfill，所以支持不支持，这都不是事儿。</p>
<h2 id="3-文件压缩"><a href="#3-文件压缩" class="headerlink" title="3. 文件压缩"></a>3. 文件压缩</h2><p>性能优化时有一个最容易想到，也最常使用的方法，那就是文件压缩，这一方案往往效果显著。<br>文件的大小会直接影响浏览器的加载速度，这一点在网络较差时表现地尤为明显。相信大家都早已习惯对CSS进行压缩，现在的构建工具，如webpack、gulp/grunt、rollup等也都支持CSS压缩功能。压缩后的文件能够明显减小，可以大大降低了浏览器的加载时间。</p>
<h2 id="4-去除无用CSS"><a href="#4-去除无用CSS" class="headerlink" title="4. 去除无用CSS"></a>4. 去除无用CSS</h2><p>虽然文件压缩能够降低文件大小。但CSS文件压缩通常只会去除无用的空格，这样就限制了CSS文件的压缩比例。那是否还有其他手段来精简CSS呢？答案显然是肯定的，如果压缩后的文件仍然超出了预期的大小，我们可以试着<strong>找到并删除代码中无用的CSS</strong>。</p>
<p>一般情况下，会存在这两种无用的CSS代码：一种是不同元素或者其他情况下的重复代码，一种是整个页面内没有生效的CSS代码。对于前者，在编写的代码时候，我们应该尽可能地提取公共类，减少重复。对于后者，在不同开发者进行代码维护的过程中，总会产生不再使用的CSS的代码，当然一个人编写时也有可能出现这一问题。而这些无用的CSS代码不仅会增加浏览器的下载量，还会增加浏览器的解析时间，这对性能来说是很大的消耗。所以我们需要找到并去除这些无用代码。</p>
<p>当然，如果手动删除这些无用CSS是很低效的。我们可以借助<a href="https://github.com/uncss/uncss">Uncss</a>7库来进行。Uncss可以用来移除样式表中的无用CSS，并且支持多文件和JavaScript注入的CSS。</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>css优化</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始搭建个人博客</title>
    <url>/2020/11/02/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h3><p>进入<a href="https://github.com/">GitHub官网</a>，新用户注册，一定记住注册的账号名和邮箱，后面会用到。</p>
<h3 id="安装node-js和npm"><a href="#安装node-js和npm" class="headerlink" title="安装node.js和npm"></a>安装node.js和npm</h3><p>进入<a href="https://nodejs.org/en/download/">Node官网</a>，下载相应版本。在Windows上安装时务必选择全部组件，包括勾选 <code>Add to Path</code>。</p>
<p>注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在cmd命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v # 会显示相应版本号，说明安装成功</span><br><span class="line">$ npm -v # 会显示相应版本号，说明安装成功</span><br></pre></td></tr></table></figure>

<h3 id="安装Git-for-windows"><a href="#安装Git-for-windows" class="headerlink" title="安装Git for windows"></a>安装Git for windows</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>建议到<a href="https://git-scm.com/">Git官网</a>下载最新版本，国内访问会很慢，可以到网上搜索下载，然后默认安装即可。安装完成后，在开始菜单里面找到 “Git –&gt; Git Bash”，打开后界面如下：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.1.png" alt="Git"></p>
<h4 id="设置用户名和邮箱"><a href="#设置用户名和邮箱" class="headerlink" title="设置用户名和邮箱"></a>设置用户名和邮箱</h4><p>因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。在命令行输入如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;user_name&quot; # user_name填入GitHub用户名</span><br><span class="line">$ git config --global user.email &quot;user_email&quot; # user_email填入GitHub注册的邮箱</span><br></pre></td></tr></table></figure>

<p>查看已设置的用户名和邮箱，在命令行输入如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config user.name</span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>

<h2 id="搭建github博客"><a href="#搭建github博客" class="headerlink" title="搭建github博客"></a>搭建github博客</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>登陆GitHub，新建一个名为**<code>你的用户名.github.io</code>**的仓库，如下图：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.2.png" alt="Git"></p>
<p>这里一定注意（否则后面的操作会出问题），如果你的 GitHub 用户名是 test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://test.github.io/">https://test.github.io</a> 了，如下图：</p>
<p><a href="https://raw.githubusercontent.com/tengzi-will/img.tengzi-will.github.io/master/GitHub-Hexo-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/03_Repository_name.jpg"><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.3.png" alt="Git"></a></p>
<p>由此可见，每一个 GitHub 账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<h3 id="配置-SSH-key"><a href="#配置-SSH-key" class="headerlink" title="配置 SSH key"></a>配置 SSH key</h3><p>打开Git Bash，在窗口中输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;user.email&quot; # user.email为GitHub上注册的邮箱</span><br></pre></td></tr></table></figure>

<p>然后直接三个回车即可，默认不需要设置密码。查看是否已经有 ssh 密钥：打开用户主目录<code>C:\Users\lenovo\.ssh</code>，.ssh文件夹一定存放在<code>C:\Users\</code>目录下，至于后面的路径lenovo这个不一定每台电脑都相同。找到.ssh文件夹，打开如下：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.4.png" alt="Git"></p>
<p>然后找到生成的 <code>.ssh</code> 的文件夹中的 <code>id_rsa.pub</code> 密钥，将内容全部复制。其中 <code>id_rsa</code> 是私钥不能泄露，<code>id_rsa.pub</code> 是公钥可以放心告诉他人。</p>
<p>打开 <a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建 <code>new SSH Key</code></p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.5.png" alt="Git"></p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.6.png" alt="Git"></p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.7.png" alt="Git"></p>
<p><code>Title</code> 为标题，任意填即可，将刚刚复制的 <code>id_rsa.pub</code> 内容粘贴进去，最后点击 <code>Add SSH key</code> 。在 <code>Git Bash</code> 中检测 <code>GitHub</code> 公钥设置是否成功，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>验证是否连接成功，连接成功显示如下：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.8.png" alt="Git"></p>
<h2 id="使用Hexo博客框架"><a href="#使用Hexo博客框架" class="headerlink" title="使用Hexo博客框架"></a>使用Hexo博客框架</h2><p>Hexo官方使用文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<p>本文使用的命令和官方文档不太一样，但意思相同，达到的效果也相同。初学者建议跟着本文一步一步做。</p>
<h3 id="hexo简介"><a href="#hexo简介" class="headerlink" title="hexo简介"></a>hexo简介</h3><h4 id="hexo是什么"><a href="#hexo是什么" class="headerlink" title="hexo是什么"></a>hexo是什么</h4><p><code>Hexo</code> 是一个简单、快速、强大的基于 <code>Github Pages</code> 的博客框架，支持 <code>Markdown</code> 格式，有众多优秀插件和主题。</p>
<p>GitHub：<a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p>
<h4 id="hexo原理"><a href="#hexo原理" class="headerlink" title="hexo原理"></a>hexo原理</h4><p>由于 <code>github pages</code> 存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以 <code>hexo</code> 所做的就是将这些 <code>md</code> 文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到 <code>GitHub</code> 。</p>
<h3 id="安装hexo与配置"><a href="#安装hexo与配置" class="headerlink" title="安装hexo与配置"></a>安装hexo与配置</h3><p>很多命令既可以用 Windows 的 <code>cmd</code> 来完成，也可以使用 <code>git bash</code> 来完成。几乎所有的命令我都是在 <code>git bash</code>上完成的，但是我在hexo初始化的过程中遇到文件夹node_modules无法生成的问题，需要 <code>cmd</code> 命令配合解决（后面会详细说明这个bug）。</p>
<h4 id="安装与初始化"><a href="#安装与初始化" class="headerlink" title="安装与初始化"></a>安装与初始化</h4><p>在 <code>git bash</code> 输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli # 该命令完成hexo的安装</span><br></pre></td></tr></table></figure>

<p>这个安装时间较长耐心等待。</p>
<p>安装完成后，在电脑的某个地方新建一个文件夹（名字可以随便取）专门用于存放博客代码，比如我的是 E:\web\github\username，由于这个文件夹将来存放博客的所有内容和素材，以及所有的博客操作都会在其中完成，所以最好不要随便放。</p>
<p>进入新建的博客目录，输入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init # 该命令完成hexo在本地博客目录的初始化</span><br></pre></td></tr></table></figure>

<p>完成后检查博客目录中的文件信息，如下图：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.9.png" alt="Git"></p>
<p>如果缺少 <code>node_modules</code> 文件夹，请按照如下所述操作（否则跳过此步骤），导致这个原因为在自己的博客文件夹中 <code>.gitignore</code> 文件中添加了 <code>node_modules/</code> ，导致更新的时候，这个文件夹被忽略，没有被更新上去。</p>
<p>解决方案：</p>
<ol>
<li>cmd进入博客当前文件夹路径</li>
<li>执行 npm i</li>
<li>执行 hexo clean</li>
<li>执行hexo g </li>
<li>执行 hexo s</li>
</ol>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><p>在 <code>git bash</code> 输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g # 生成静态文件</span><br></pre></td></tr></table></figure>

<p>执行以上命令之后，Hexo 就会在 <code>public</code> 文件夹生成相关 HTML 文件，这些文件将来都是要提交到 <code>GitHub</code> 上 <strong><code>你的用户名.github.io</code></strong> 的仓库上去的：</p>
<h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><p>在 <code>git bash</code> 输入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo s # 开启本地预览</span><br></pre></td></tr></table></figure>

<p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <code>http://localhost:4000</code> 即可看到内容，<code>Ctrl+C</code> 停止本地预览。本地预览可以实时查看博客的编辑情况，待博客写完后一起部署到 <code>GitHub</code> 上。</p>
<p>第一次初始化的时候 hexo默认的主题为landscape，打开时就是这个样子：</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.10.png" alt="Git"></p>
<h3 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h3><h4 id="配置站点配置文件"><a href="#配置站点配置文件" class="headerlink" title="配置站点配置文件"></a>配置站点配置文件</h4><p>hexo 有2种 <code>_config.yml</code>文件，一个是根目录下的全局的 <code>_config.yml</code>，一个是各个主体 theme 下的 <code>_config.yml</code>。将前者称为<strong>站点配置文件</strong>， 后者称为<strong>主题配置文件</strong>。</p>
<p>打开根目录下站点配置文件 <code>_config.yml</code>，配置有关 deploy 的部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/username/username.github.io.git  // username换成自己的用户名</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在 <code>git bash</code> 输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save <span class="comment"># 安装部署插件</span></span></span><br></pre></td></tr></table></figure>

<p>如果不进行上述操作，直接使用 <code>hexo d</code> 部署到 <code>GitHub</code>，将会报错。</p>
<h4 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure>

<p>部署成功后，打开你的网址 <strong><code>https://你的用户名.github.io/</code></strong> 出现下图，表示部署成功。</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.10.png" alt="Git"></p>
<p>自此博客的搭建就完成了，剩下的就是学习如何美化博客了！</p>
<h2 id="Hexo博客基本配置"><a href="#Hexo博客基本配置" class="headerlink" title="Hexo博客基本配置"></a>Hexo博客基本配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h4><p>官方默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。</p>
<blockquote>
<p><a href="https://hexo.io/themes/">官方主题</a>：官方提供的各种主题</p>
</blockquote>
<p><a href="https://www.zhihu.com/question/24422335">知乎</a>、<a href="https://github.com/hexojs/hexo/wiki/Themes">GitHub</a> 上都能够找到各种主题推荐，这里不详细介绍。只以使用量排名第一的主题 NexT。更换 NexT 主题可以参考 <a href="http://theme-next.iissnan.com/">NexT 官方使用文档</a>，点击开始使用一步一步操作。下面做一个示范，其他主题的安装方法都是一样的。</p>
<p>下载主题，最新版NexT 7.0x下载地址变为<code> https://github.com/theme-next/hexo-theme-next.git</code>了，在命令行输入以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​    启用主题，打开根目录下站点配置文件 <code>_config.yml</code>， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">## 配置主题</span><br><span class="line">theme: next</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打开主题的 <code>_config.yml</code> 配置文件，不是<strong>站点配置文件</strong>，找到Scheme Settings</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>next</code> 主题有四个样式，我用的是 <code>Gemini</code>，大家根据喜好设置。</p>
<p>在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存，以免出现一些莫名其妙的问题。然后重新执行 <code>hexo g</code> 以及 <code>hexo s</code> 来重新生成和本地预览。如下图，说明主题修改完成。</p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/NexT-assets/1.11.png" alt="img"></p>
<h4 id="配置站点信息"><a href="#配置站点信息" class="headerlink" title="配置站点信息"></a>配置站点信息</h4><p>打开根目录下站点配置文件 <code>_config.yml</code>，设置如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: YQX<span class="string">&#x27;s Blog</span></span><br><span class="line"><span class="string">subtitle: &quot;每一个不曾起舞的日子都是对生命的辜负&quot;</span></span><br><span class="line"><span class="string">description: &quot;Stay hungry,stay foolish&quot;</span></span><br><span class="line"><span class="string">keywords: MachineLearning, DeepLearning, ReinforcementLearning</span></span><br><span class="line"><span class="string">author: Yu Qixuan</span></span><br><span class="line"><span class="string">language: zh-CN</span></span><br><span class="line"><span class="string">timezone: &#x27;</span><span class="string">&#x27;</span></span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>title：网站标题</li>
<li>subtitle：网站副标题</li>
<li>description：网站描述</li>
<li>keywords：关键字</li>
<li>author：作者</li>
<li>language：网站使用的语言</li>
<li>timezone：网站时区。Hexo 默认使用您电脑的时区</li>
</ul>
<p>其中language一定要设置为主题能够识别的语言（不然中文可能出现乱码），在 <code>\themes\next\languages\</code> 中可以找到，中文格式为：zh-CN。</p>
<h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><h4 id="初识-Markdown-语法"><a href="#初识-Markdown-语法" class="headerlink" title="初识 Markdown 语法"></a>初识 Markdown 语法</h4><p><strong>Markdown</strong> 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<strong>Markdown</strong> 语法简洁明了、容易掌握，而且功能比纯文本更强，因此写博客使用它，可以让用户更加专注的写文章，而不需要费尽心力的考虑样式，相对于 <code>html</code> 已经算是轻量级语言，像有道云笔记也支持<br><strong>Markdown</strong> 写作。并且 <strong>Markdown</strong> 完全兼容 <code>html</code>，也就是可以在文章里直接插入 <code>html</code> 代码。比如给博文添加音乐，就可以直接把音乐的外链 <code>html</code> 代码插入文章中。</p>
<p>具体语法参看：<a href="https://www.appinn.com/markdown/">Markdown 语法说明(简体中文版)</a> 可以说十分钟就可以入门。当然，工欲善其事必先利其器，选择一个好的 <code>Markdown</code> 编辑器也是非常重要的，这里推荐 <a href="http://www.markdownpad.com/"><code>MarkdownPad</code></a>，这是带有预览效果的编辑器，也可以使用本地的文本编辑器，更多的 <code>Markdown</code> 的语法与编辑器自己可以搜索了解。</p>
<h4 id="创建一篇博文"><a href="#创建一篇博文" class="headerlink" title="创建一篇博文"></a>创建一篇博文</h4><p>执行如下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&#x27;blog_name&#x27;</span> <span class="comment"># blog_name填入文章名字</span></span><br></pre></td></tr></table></figure>

<p>hexo会帮我们在 <code>..\hexo\source\_posts</code> 下生成相关 <code>md</code> 文件，每一篇博客对应一个 <code>md</code> 文件。直接使用编辑器打开 <code>md</code> 文件可以直接编辑。</p>
<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站配置信息，也就是本文所称的<strong>站点配置文件</strong>，可以在此配置大部分的参数。基本配置在前面基本已经设置过了。</p>
<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>模版文件夹。新建文章时，<code>Hexo</code> 会根据 <code>scaffold</code> 来建立文件。默认的模板有三种 draft.md 、 page.md 和 post.md，我们自己也可以在该文件夹下创建属于自己定制的模板，推荐格式如下：</p>
<ul>
<li>title: GitHub + Hexo 从零开始搭建个人博客</li>
<li>date: 1544357859000</li>
<li>tags:</li>
<li>categories：</li>
<li>description：</li>
</ul>
<p>然后，输入 <code>hexo new blog &quot;文章名&quot;</code> 进行测试。</p>
<h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>该文件夹中的内容将被最终 <code>push</code> 到 <code>GitHub</code> 仓库中。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_ (下划线)</code> 的文件 / 文件夹和隐藏的文件将会被忽略。<code>Markdown</code> 和 <code>HTML</code> 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝到 <code>public</code> 文件夹。</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>主题文件夹，下载的主题都保存在此文件夹下。Hexo 会根据主题来生成静态页面。</p>
<p>另外主题的配置也有很多高级技巧，这里附上 <a href="http://theme-next.iissnan.com/getting-started.html">Next 主题官方的配置文档教程</a>。</p>
<p>还有许多个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能High功能、404网页设置等，可以参看：</p>
<ul>
<li><a href="http://theme-next.iissnan.com/theme-settings.html">主题配置 - NexT 使用文档</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html">第三方服务集成 - NexT 使用文档</a></li>
<li><a href="http://theme-next.iissnan.com/tag-plugins.html">内置标签 - NexT 使用文</a></li>
<li><a href="http://theme-next.iissnan.com/advanced-settings.html">档进阶设定 - NexT 使用文档</a></li>
<li><a href="http://www.iamlj.com/2016/08/add-special-effect-harlem-shake-for-hexo/">High功能特效 - Next 主题网站推荐博主的文章</a></li>
</ul>
<h4 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h4><p>图床，当博文中有图片时，若是少量图片，可以直接把图片存放在 <code>source</code> 文件夹中，但这显然不合理的，因为图片会占据大量的存储的空间，加载的时候相对缓慢 ，这时考虑把博文里的图片上传到某一网站，然后获得外部链接，使用 <code>Markdown</code> 语法，<code>![图片信息](外部链接)</code> 完成图片的插入，这种网站就被成为图床。其实也可以直接在 GitHub 中新建一个仓库，专门用来存放博客的图片，我就是用的这个方法。</p>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><ol>
<li>hexo new “postName” # 新建文章</li>
<li>hexo clean # 清除缓存</li>
<li>hexo generate # 生成静态页面至 public 目录</li>
<li>hexo server # 开启预览访问端口（默认端口 4000，’ctrl + c’关闭 server）</li>
<li>hexo deploy # 部署到 GitHub</li>
<li>hexo help # 查看帮助</li>
<li>hexo version # 查看 Hexo 的版本</li>
</ol>
<h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><ol>
<li>hexo n == hexo new</li>
<li>hexo g == hexo generate</li>
<li>hexo s == hexo server</li>
<li>hexo d == hexo deploy</li>
</ol>
<h3 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h3><ol>
<li>hexo s -g # 生成并本地预览</li>
<li>hexo d -g # 生成并上传</li>
</ol>
<h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p><a href="http://theme-next.iissnan.com/getting-started.html">NexT官方文档</a></p>
<p><a href="https://ahaasin.github.io/2019/09/05/hexo%E4%B8%8BnexT7-X%E4%B8%BB%E9%A2%98%E7%9A%84%E7%BE%8E%E5%8C%96%E5%8F%8A%E5%85%B6%E4%BB%96%E8%AE%BE%E7%BD%AE/">hexo下NexT7.X主题的美化及其他设置</a></p>
<p><a href="https://blog.csdn.net/weixin_42905141/article/details/102677424">hexo4.0 - Next7.2.4 主题优化配置</a></p>
]]></content>
      <categories>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>从零开始搭建个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>前端优化</title>
    <url>/2020/11/02/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h2><p>降低请求量：合并资源，减少HTTP 请求数，minify / gzip 压缩，webP，lazyLoad。</p>
<p>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</p>
<p>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存localStorage。</p>
<p>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline。</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h4 id="参考回答："><a href="#参考回答：" class="headerlink" title="参考回答："></a>参考回答：</h4><p>减少HTTP请求</p>
<p>使用内容发布网络（CDN）</p>
<p>添加本地缓存</p>
<p>压缩资源文件</p>
<p>将CSS样式表放在顶部，把javascript放在底部（浏览器的运行机制决定）</p>
<p>避免使用CSS表达式</p>
<p>减少DNS查询</p>
<p>使用外部javascript和CSS</p>
<p>避免重定向</p>
<p>图片lazyLoad</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>前端优化</tag>
      </tags>
  </entry>
  <entry>
    <title>探花交友登陆页面的实现</title>
    <url>/2020/11/03/%E6%8E%A2%E8%8A%B1%E4%BA%A4%E5%8F%8B%E7%99%BB%E9%99%86%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h2><h3 id="先上效果图"><a href="#先上效果图" class="headerlink" title="先上效果图"></a>先上效果图</h3><p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/1.1.png" alt="login"></p>
<p><img data-src="https://raw.githubusercontent.com/yuqixuan/Figure-bed/main/ReactNative-assets/1.2.png" alt="login"></p>
<h3 id="用到的组件"><a href="#用到的组件" class="headerlink" title="用到的组件"></a>用到的组件</h3><ol>
<li>StatusBar（顶部栏透明）</li>
<li>Image（背景图片）</li>
<li>View（容器，类似于div）</li>
<li>Text（文本标签，类似于span）</li>
<li>StyleSheet（用于写样式）</li>
<li>TouchableOpacity（可点击的按钮）</li>
<li>Input (<a href="https://github.com/react-native-elements/react-native-elements">react-native-elements</a>)（可设置一些规则的输入框）</li>
<li>Icon (<a href="">react-native-vector-icons/FontAwesome5</a>)（输入框用到的icon）</li>
<li>LinearGradient (<a href="https://www.npmjs.com/package/react-native-linear-gradient">react-native-linear-gradient</a>)（按钮用到的线性渐变色）</li>
<li>Toast (<a href="https://github.com/rilyu/teaset/blob/HEAD/docs/cn/README.md">Teaset</a>)（提示框）</li>
<li>CodeField (<a href="https://www.npmjs.com/package/react-native-confirmation-code-field">react-native-confirmation-code-field</a>) （输入验证码的框框）</li>
</ol>
<h3 id="接下来笔者就自上而下实现登陆页面的效果"><a href="#接下来笔者就自上而下实现登陆页面的效果" class="headerlink" title="接下来笔者就自上而下实现登陆页面的效果"></a>接下来笔者就自上而下实现登陆页面的效果</h3><p>笔者全面拥抱hooks，所以用的组件都是函数式组件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// login页面引入的组件</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StatusBar</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Icon <span class="keyword">from</span> <span class="string">&#x27;react-native-vector-icons/FontAwesome&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-elements&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  CodeField,</span><br><span class="line">  Cursor,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-confirmation-code-field&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 样式</span></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  image: &#123;</span><br><span class="line">    width: <span class="string">&#x27;100%&#x27;</span>, </span><br><span class="line">    height: pxToDp(<span class="number">300</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#888&#x27;</span>,</span><br><span class="line">    fontSize: pxToDp(<span class="number">25</span>),</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    marginTop: pxToDp(<span class="number">10</span>),</span><br><span class="line">    marginBottom: pxToDp(<span class="number">30</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  cell: &#123;</span><br><span class="line">    width: <span class="number">40</span>,</span><br><span class="line">    height: <span class="number">40</span>,</span><br><span class="line">    lineHeight: <span class="number">38</span>,</span><br><span class="line">    fontSize: <span class="number">24</span>,</span><br><span class="line">    borderBottomWidth: <span class="number">2</span>,</span><br><span class="line">    borderColor: <span class="string">&#x27;#888&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#7d53ea&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  focusCell: &#123;</span><br><span class="line">    borderColor: <span class="string">&#x27;#7d53ea&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-顶部栏透明"><a href="#1-顶部栏透明" class="headerlink" title="1. 顶部栏透明"></a>1. 顶部栏透明</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;StatusBar backgroundColor=<span class="string">&quot;transparent&quot;</span> translucent=&#123;<span class="literal">true</span>&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-背景图片"><a href="#2-背景图片" class="headerlink" title="2. 背景图片"></a>2. 背景图片</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;Image style=&#123;styles.image&#125;source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../../assets/img/login.jpg&#x27;</span>)&#125;/&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-中间内容"><a href="#3-中间内容" class="headerlink" title="3. 中间内容"></a>3. 中间内容</h4><p>登陆页面中间内容由<code>showLogin</code>控制</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送验证码之前的中间内容 </span></span><br><span class="line">&lt;View style=&#123;&#123;<span class="attr">padding</span>: pxToDp(<span class="number">20</span>)&#125;&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.title&#125;&gt;手机号码登陆注册&lt;/Text&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Input</span><br><span class="line">            placeholder=<span class="string">&#x27;请输入手机号码&#x27;</span></span><br><span class="line">            leftIcon=&#123;&#123;<span class="attr">type</span>:<span class="string">&#x27;font-awesome&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;phone&#x27;</span>,<span class="attr">color</span>:<span class="string">&#x27;#ccc&#x27;</span>,<span class="attr">size</span>:pxToDp(<span class="number">20</span>)&#125;&#125;</span><br><span class="line">            maxLength=&#123;<span class="number">11</span>&#125;</span><br><span class="line">            keyboardType=<span class="string">&quot;phone-pad&quot;</span></span><br><span class="line">            inputStyle=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>&#125;&#125;</span><br><span class="line">            onChangeText=&#123;changePhone&#125;</span><br><span class="line">            errorMessage=&#123;bool ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;手机号码格式不正确&#x27;</span>&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;THButton style=&#123;&#123;<span class="attr">borderRadius</span>: <span class="number">20</span>, <span class="attr">alignSelf</span>: <span class="string">&#x27;center&#x27;</span>, <span class="attr">width</span>: <span class="string">&#x27;85%&#x27;</span>,                             <span class="attr">height</span>:pxToDp(<span class="number">40</span>)&#125;&#125; </span><br><span class="line">                    onPress=&#123;submitEdit&#125;&gt;获取验证码&lt;/THButton&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line"> &lt;/View&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送验证码之后的中间内容 </span></span><br><span class="line">&lt;View style=&#123;&#123;<span class="attr">padding</span>: pxToDp(<span class="number">20</span>)&#125;&#125;&gt;</span><br><span class="line">        &lt;View&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span> <span class="attr">pxToDp</span>(<span class="attr">25</span>), <span class="attr">color:</span> &#x27;#<span class="attr">888</span>&#x27;, <span class="attr">fontWeight:</span> &#x27;<span class="attr">bold</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            请输入6为验证码<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>&lt;/View&gt;</span><br><span class="line">        &lt;View&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;#<span class="attr">888</span>&#x27;, <span class="attr">marginTop:</span> <span class="attr">pxToDp</span>(<span class="attr">25</span>)&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            已发送到+86 &#123;phone&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">		&lt;/View&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">marginTop</span>: pxToDp(<span class="number">40</span>)&#125;&#125;&gt;</span><br><span class="line">          &lt;CodeField</span><br><span class="line">            value=&#123;value&#125;</span><br><span class="line">            onChangeText=&#123;handleValue&#125;</span><br><span class="line">            cellCount=&#123;CELL_COUNT&#125;</span><br><span class="line">            keyboardType=<span class="string">&quot;number-pad&quot;</span></span><br><span class="line">            renderCell=&#123;<span class="function">(<span class="params">&#123;index, symbol, isFocused&#125;</span>) =&gt;</span> (</span><br><span class="line">              &lt;Text</span><br><span class="line">                key=&#123;index&#125;</span><br><span class="line">                style=&#123;[styles.cell, isFocused &amp;&amp; styles.focusCell]&#125;&gt;</span><br><span class="line">                &#123;symbol || (isFocused ? <span class="xml"><span class="tag">&lt;<span class="name">Cursor</span> /&gt;</span></span> : <span class="literal">null</span>)&#125;</span><br><span class="line">              &lt;/Text&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">          /&gt;</span><br><span class="line"> &lt;/View&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 验证码的个数</span></span><br><span class="line"> <span class="keyword">const</span> CELL_COUNT = <span class="number">6</span>;</span><br><span class="line"> <span class="comment">// 用户输入的电话好么</span></span><br><span class="line"> <span class="keyword">const</span> [phone, setPhone] = useState(<span class="number">0</span>)</span><br><span class="line"> <span class="comment">// 用户输入的电话号码是否符合规则</span></span><br><span class="line"> <span class="keyword">const</span> [bool, setBool] = useState(<span class="literal">true</span>)</span><br><span class="line"> <span class="comment">// 显示登陆页面还是用户验证码页面</span></span><br><span class="line"> <span class="keyword">const</span> [showLogin, setShowLogin] = useState(<span class="literal">true</span>)</span><br><span class="line"> <span class="comment">// 用户输入的验证码</span></span><br><span class="line"> <span class="keyword">const</span> [value, setVaue] = useState(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> <span class="comment">// 重新获取验证码倒计时</span></span><br><span class="line"> <span class="keyword">const</span> [btnText, setBtnText] = useState(<span class="string">&#x27;重新获取&#x27;</span>)</span><br><span class="line"> <span class="comment">// 倒计时时不能点击</span></span><br><span class="line"> <span class="keyword">const</span> [isDisabled, setIsDisabled] = useState(<span class="literal">true</span>) </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取验证码</span></span><br><span class="line"> <span class="keyword">const</span> submitEdit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> boolRes = validatorPhoneNumber(phone)</span><br><span class="line">   setBool(boolRes)</span><br><span class="line">   <span class="function"><span class="title">if</span>(<span class="params">boolRes</span>)</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> res = <span class="keyword">await</span> request.post(<span class="string">&#x27;/user/login&#x27;</span>,&#123; <span class="attr">phone</span>: phone &#125;)</span><br><span class="line">     Toast.message(res.data,<span class="number">4000</span>)</span><br><span class="line">     setShowLogin(<span class="literal">false</span>)</span><br><span class="line">     countDown()</span><br><span class="line">   &#125;</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"> <span class="comment">// 记录电话号码</span></span><br><span class="line"> <span class="keyword">const</span> changePhone = <span class="function"><span class="params">phoneNum</span> =&gt;</span> &#123;</span><br><span class="line">   setPhone(phoneNum)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取用户输入的验证码</span></span><br><span class="line"> <span class="keyword">const</span> handleValue = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   setVaue(value)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 验证码倒计时</span></span><br><span class="line"> <span class="keyword">const</span> countDown = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> count = <span class="number">59</span></span><br><span class="line">   setBtnText(<span class="string">`重新获取(<span class="subst">$&#123;count&#125;</span>)s`</span>)</span><br><span class="line">   <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     count--</span><br><span class="line">     setBtnText(<span class="string">`重新获取(<span class="subst">$&#123;count&#125;</span>)s`</span>)</span><br><span class="line">     <span class="function"><span class="title">if</span>(<span class="params">count === <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">       setBtnText(<span class="string">&#x27;重新获取&#x27;</span>)</span><br><span class="line">       setIsDisabled(<span class="literal">false</span>)</span><br><span class="line">       <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, <span class="number">3000</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-完整login-js"><a href="#5-完整login-js" class="headerlink" title="5. 完整login.js"></a>5. 完整login.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  Image,</span><br><span class="line">  StatusBar</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Icon <span class="keyword">from</span> <span class="string">&#x27;react-native-vector-icons/FontAwesome&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-elements&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  CodeField,</span><br><span class="line">  Cursor,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native-confirmation-code-field&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; validatorPhoneNumber &#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/validator&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; pxToDp, screenHeight &#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils/pxToDp&#x27;</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../../service/request&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">&#x27;../../utils/toast&#x27;</span></span><br><span class="line"><span class="keyword">import</span> THButton <span class="keyword">from</span> <span class="string">&#x27;../../components/THButton&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(<span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 验证码的个数</span></span><br><span class="line">  <span class="keyword">const</span> CELL_COUNT = <span class="number">6</span>;</span><br><span class="line">  <span class="comment">// 用户输入的电话好么</span></span><br><span class="line">  <span class="keyword">const</span> [phone, setPhone] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 用户输入的电话号码是否符合规则</span></span><br><span class="line">  <span class="keyword">const</span> [bool, setBool] = useState(<span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 显示登陆页面还是用户验证码页面</span></span><br><span class="line">  <span class="keyword">const</span> [showLogin, setShowLogin] = useState(<span class="literal">true</span>)</span><br><span class="line">  <span class="comment">// 用户输入的验证码</span></span><br><span class="line">  <span class="keyword">const</span> [value, setVaue] = useState(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="comment">// 重新获取验证码倒计时</span></span><br><span class="line">  <span class="keyword">const</span> [btnText, setBtnText] = useState(<span class="string">&#x27;重新获取&#x27;</span>)</span><br><span class="line">  <span class="comment">// 倒计时时不能点击</span></span><br><span class="line">  <span class="keyword">const</span> [isDisabled, setIsDisabled] = useState(<span class="literal">true</span>) </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取验证码</span></span><br><span class="line">  <span class="keyword">const</span> submitEdit = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> boolRes = validatorPhoneNumber(phone)</span><br><span class="line">    setBool(boolRes)</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">boolRes</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> request.post(<span class="string">&#x27;/user/login&#x27;</span>,&#123; <span class="attr">phone</span>: phone &#125;)</span><br><span class="line">      Toast.message(res.data,<span class="number">4000</span>)</span><br><span class="line">      setShowLogin(<span class="literal">false</span>)</span><br><span class="line">      countDown()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录电话号码</span></span><br><span class="line">  <span class="keyword">const</span> changePhone = <span class="function"><span class="params">phoneNum</span> =&gt;</span> &#123;</span><br><span class="line">    setPhone(phoneNum)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取用户输入的验证码</span></span><br><span class="line">  <span class="keyword">const</span> handleValue = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    setVaue(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 验证码倒计时</span></span><br><span class="line">  <span class="keyword">const</span> countDown = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">59</span></span><br><span class="line">    setBtnText(<span class="string">`重新获取(<span class="subst">$&#123;count&#125;</span>)s`</span>)</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count--</span><br><span class="line">      setBtnText(<span class="string">`重新获取(<span class="subst">$&#123;count&#125;</span>)s`</span>)</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">count === <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        setBtnText(<span class="string">&#x27;重新获取&#x27;</span>)</span><br><span class="line">        setIsDisabled(<span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 登陆页面</span></span><br><span class="line">  <span class="keyword">const</span> loginPage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">padding</span>: pxToDp(<span class="number">20</span>)&#125;&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;styles.title&#125;&gt;手机号码登陆注册&lt;/Text&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Input</span><br><span class="line">            placeholder=<span class="string">&#x27;请输入手机号码&#x27;</span></span><br><span class="line">            leftIcon=&#123;&#123;<span class="attr">type</span>:<span class="string">&#x27;font-awesome&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;phone&#x27;</span>,<span class="attr">color</span>:<span class="string">&#x27;#ccc&#x27;</span>,<span class="attr">size</span>:pxToDp(<span class="number">20</span>)&#125;&#125;</span><br><span class="line">            maxLength=&#123;<span class="number">11</span>&#125;</span><br><span class="line">            keyboardType=<span class="string">&quot;phone-pad&quot;</span></span><br><span class="line">            inputStyle=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;#333&#x27;</span>&#125;&#125;</span><br><span class="line">            onChangeText=&#123;changePhone&#125;</span><br><span class="line">            errorMessage=&#123;bool ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;手机号码格式不正确&#x27;</span>&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;THButton style=&#123;&#123;<span class="attr">borderRadius</span>: <span class="number">20</span>, </span><br><span class="line">                           alignSelf: <span class="string">&#x27;center&#x27;</span>, </span><br><span class="line">                           width: <span class="string">&#x27;85%&#x27;</span>, </span><br><span class="line">                           height:pxToDp(<span class="number">40</span>)&#125;&#125; </span><br><span class="line">                           onPress=&#123;submitEdit&#125;&gt;获取验证码&lt;/THButton&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输入验证码页面</span></span><br><span class="line">  <span class="keyword">const</span> vcodePage = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;&#123;<span class="attr">padding</span>: pxToDp(<span class="number">20</span>)&#125;&#125;&gt;</span><br><span class="line">        &lt;View&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span> <span class="attr">pxToDp</span>(<span class="attr">25</span>), </span></span></span><br><span class="line"><span class="xml">            				color: &#x27;#888&#x27;, </span></span><br><span class="line"><span class="xml">                            fontWeight: &#x27;bold&#x27;&#125;&#125;&gt;请输入6为验证码<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">		&lt;/View&gt;</span><br><span class="line">        &lt;View&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span> &#x27;#<span class="attr">888</span>&#x27;, <span class="attr">marginTop:</span> <span class="attr">pxToDp</span>(<span class="attr">25</span>)&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            已发送到+86 &#123;phone&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">		&lt;/View&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">marginTop</span>: pxToDp(<span class="number">40</span>)&#125;&#125;&gt;</span><br><span class="line">          &lt;CodeField</span><br><span class="line">            value=&#123;value&#125;</span><br><span class="line">            onChangeText=&#123;handleValue&#125;</span><br><span class="line">            cellCount=&#123;CELL_COUNT&#125;</span><br><span class="line">            keyboardType=<span class="string">&quot;number-pad&quot;</span></span><br><span class="line">            renderCell=&#123;<span class="function">(<span class="params">&#123;index, symbol, isFocused&#125;</span>) =&gt;</span> (</span><br><span class="line">              &lt;Text</span><br><span class="line">                key=&#123;index&#125;</span><br><span class="line">                style=&#123;[styles.cell, isFocused &amp;&amp; styles.focusCell]&#125;&gt;</span><br><span class="line">                &#123;symbol || (isFocused ? <span class="xml"><span class="tag">&lt;<span class="name">Cursor</span> /&gt;</span></span> : <span class="literal">null</span>)&#125;</span><br><span class="line">              &lt;/Text&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        &lt;View style=&#123;&#123;<span class="attr">marginTop</span>: pxToDp(<span class="number">25</span>)&#125;&#125;&gt;</span><br><span class="line">            &lt;THButton disabled=&#123;isDisabled&#125; </span><br><span class="line">					  style=&#123;&#123;<span class="attr">borderRadius</span>: <span class="number">20</span>, </span><br><span class="line">                      alignSelf: <span class="string">&#x27;center&#x27;</span>, </span><br><span class="line">                      width: <span class="string">&#x27;85%&#x27;</span>, </span><br><span class="line">                      height:pxToDp(<span class="number">40</span>)&#125;&#125; </span><br><span class="line">                      onPress=&#123;submitEdit&#125;&gt;&#123;btnText&#125;</span><br><span class="line">			&lt;/THButton&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;View style=&#123;&#123;<span class="attr">height</span>:<span class="string">&#x27;100%&#x27;</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;#fff&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;StatusBar backgroundColor=<span class="string">&quot;transparent&quot;</span> translucent=&#123;<span class="literal">true</span>&#125;/&gt;</span><br><span class="line">      &lt;Image style=&#123;styles.image&#125;</span><br><span class="line">             source=&#123;<span class="built_in">require</span>(<span class="string">&#x27;../../assets/img/login.jpg&#x27;</span>)&#125; </span><br><span class="line">             /&gt;</span><br><span class="line">     &#123;showLogin ? loginPage() : vcodePage()&#125;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  image: &#123;</span><br><span class="line">    width: <span class="string">&#x27;100%&#x27;</span>, </span><br><span class="line">    height: pxToDp(<span class="number">300</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  title: &#123;</span><br><span class="line">    color: <span class="string">&#x27;#888&#x27;</span>,</span><br><span class="line">    fontSize: pxToDp(<span class="number">25</span>),</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    marginTop: pxToDp(<span class="number">10</span>),</span><br><span class="line">    marginBottom: pxToDp(<span class="number">30</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  cell: &#123;</span><br><span class="line">    width: <span class="number">40</span>,</span><br><span class="line">    height: <span class="number">40</span>,</span><br><span class="line">    lineHeight: <span class="number">38</span>,</span><br><span class="line">    fontSize: <span class="number">24</span>,</span><br><span class="line">    borderBottomWidth: <span class="number">2</span>,</span><br><span class="line">    borderColor: <span class="string">&#x27;#888&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#7d53ea&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  focusCell: &#123;</span><br><span class="line">    borderColor: <span class="string">&#x27;#7d53ea&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="6-封装的方法及组件"><a href="#6-封装的方法及组件" class="headerlink" title="6. 封装的方法及组件"></a>6. 封装的方法及组件</h4><ol>
<li>px转dp</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Dimensions &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设计稿的宽度 / 元素的宽度 = 手机屏幕 / 手机元素的宽度</span></span><br><span class="line"><span class="comment"> * 手机元素的宽度 = 手机屏幕 * 元素的宽度 / 设计稿的宽度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屏幕的宽度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> screenWidth = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 屏幕的高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> screenHeight = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).height</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * px转dp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pxToDp = <span class="function">(<span class="params">elePx</span>) =&gt;</span> screenWidth * elePx / <span class="number">375</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Toast框</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ActivityIndicator &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast, Theme &#125; <span class="keyword">from</span> <span class="string">&#x27;teaset&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> customKey = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示Toast框</span></span><br><span class="line">Toast.showLoading = <span class="function">(<span class="params">content</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (customKey) <span class="keyword">return</span>;</span><br><span class="line">  customKey = Toast.show(&#123;</span><br><span class="line">    text: content,</span><br><span class="line">    icon: <span class="xml"><span class="tag">&lt;<span class="name">ActivityIndicator</span> <span class="attr">size</span>=<span class="string">&#x27;large&#x27;</span> <span class="attr">color</span>=<span class="string">&#123;Theme.toastIconTintColor&#125;</span> /&gt;</span></span>,</span><br><span class="line">    position: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    duration: <span class="number">10000</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏Toast框</span></span><br><span class="line">Toast.hideLoading = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!customKey) <span class="keyword">return</span>;</span><br><span class="line">  Toast.hide(customKey);</span><br><span class="line">  customKey = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Toast</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>验证手机号码</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用正则表达式，笔者随便写了一个，追求严谨可以度娘找正则</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> validatorPhoneNumber = <span class="function"><span class="params">phone</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^1[3-9]\d&#123;9&#125;$/</span></span><br><span class="line">  <span class="keyword">return</span> reg.test(phone)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>渐变按钮</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; TouchableOpacity, Text, StyleSheet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span></span><br><span class="line"><span class="keyword">import</span> LinearGradient <span class="keyword">from</span> <span class="string">&#x27;react-native-linear-gradient&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> memo(<span class="function"><span class="keyword">function</span> <span class="title">Index</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;children, style, styleText, onPress, disabled&#125; = props</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;TouchableOpacity disabled=&#123;disabled&#125; </span><br><span class="line">                      onPress=&#123;onPress&#125; </span><br><span class="line">                      style=&#123;&#123;<span class="attr">width</span>: <span class="string">&#x27;100%&#x27;</span>, </span><br><span class="line">                      height: <span class="string">&#x27;100%&#x27;</span>, ...style, </span><br><span class="line">                      overflow: <span class="string">&#x27;hidden&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">      &lt;LinearGradient start=&#123;&#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;&#125; </span><br><span class="line">                      end=&#123;&#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;&#125; </span><br><span class="line">                      colors=&#123;[<span class="string">&#x27;#96b3cd&#x27;</span>, <span class="string">&#x27;#e0708c&#x27;</span>]&#125; </span><br><span class="line">                      style=&#123;styles.linearGradient&#125;&gt;</span><br><span class="line">        &lt;Text style=&#123;&#123;...styles.buttonText, ...styleText&#125;&#125;&gt;</span><br><span class="line">          &#123;children || <span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line">        &lt;/Text&gt;</span><br><span class="line">      &lt;/LinearGradient&gt;</span><br><span class="line">    &lt;/TouchableOpacity&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Later on in your styles..</span></span><br><span class="line"><span class="keyword">var</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  linearGradient: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    paddingLeft: <span class="number">15</span>,</span><br><span class="line">    paddingRight: <span class="number">15</span>,</span><br><span class="line">    borderRadius: <span class="number">5</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  buttonText: &#123;</span><br><span class="line">    fontSize: <span class="number">18</span>,</span><br><span class="line">    fontFamily: <span class="string">&#x27;Gill Sans&#x27;</span>,</span><br><span class="line">    textAlign: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    color: <span class="string">&#x27;#ffffff&#x27;</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;transparent&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="7-网络请求的封装"><a href="#7-网络请求的封装" class="headerlink" title="7. 网络请求的封装"></a>7. 网络请求的封装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// contants.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> BASE_URL = <span class="string">&#x27;http://157.122.54.189:9089&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Toast <span class="keyword">from</span> <span class="string">&#x27;../utils/toast&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; BASE_URL &#125; <span class="keyword">from</span> <span class="string">&#x27;./constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: BASE_URL,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每次请求数据显示Toast框</span></span><br><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  Toast.showLoading(<span class="string">&#x27;请求中&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应时隐藏Toast框</span></span><br><span class="line">instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  Toast.hideLoading()</span><br><span class="line">  <span class="keyword">return</span> res.data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  get: instance.get,</span><br><span class="line">  post: instance.post</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>探花交友登陆页面</tag>
      </tags>
  </entry>
</search>
